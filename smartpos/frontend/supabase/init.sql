-- Create tables for SmartPOS

-- Enable RLS (Row Level Security)
alter database postgres set timezone to 'UTC';

-- Create a table for user profiles
create table profiles (
  id uuid references auth.users on delete cascade primary key,
  username text unique not null,
  phone text unique not null,
  shop_name text not null,
  language_preference text not null default 'en',
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create a table for products
create table products (
  id bigint generated by default as identity primary key,
  name text not null,
  description text,
  price decimal(10,2) not null,
  barcode text unique,
  category text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  owner_id uuid references profiles(id) on delete cascade not null
);

-- Create a table for inventory
create table inventory (
  id bigint generated by default as identity primary key,
  product_id bigint references products(id) on delete cascade not null,
  quantity integer not null default 0,
  low_stock_threshold integer default 10,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  owner_id uuid references profiles(id) on delete cascade not null
);

-- Create a table for transactions
create table transactions (
  id bigint generated by default as identity primary key,
  type text not null check (type in ('sale', 'purchase', 'return')),
  total_amount decimal(10,2) not null,
  payment_method text not null,
  customer_name text,
  customer_phone text,
  notes text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  owner_id uuid references profiles(id) on delete cascade not null
);

-- Create a table for transaction items
create table transaction_items (
  id bigint generated by default as identity primary key,
  transaction_id bigint references transactions(id) on delete cascade not null,
  product_id bigint references products(id) on delete cascade not null,
  quantity integer not null,
  unit_price decimal(10,2) not null,
  total_price decimal(10,2) not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Enable Row Level Security (RLS)
alter table profiles enable row level security;
alter table products enable row level security;
alter table inventory enable row level security;
alter table transactions enable row level security;
alter table transaction_items enable row level security;

-- Create policies
-- Profiles: Users can only read their own profile
create policy "Users can read own profile"
  on profiles for select
  using ( auth.uid() = id );

create policy "Users can update own profile"
  on profiles for update
  using ( auth.uid() = id );

-- Products: Users can CRUD their own products
create policy "Users can CRUD own products"
  on products for all
  using ( auth.uid() = owner_id );

-- Inventory: Users can CRUD their own inventory
create policy "Users can CRUD own inventory"
  on inventory for all
  using ( auth.uid() = owner_id );

-- Transactions: Users can CRUD their own transactions
create policy "Users can CRUD own transactions"
  on transactions for all
  using ( auth.uid() = owner_id );

-- Transaction items: Users can CRUD items in their own transactions
create policy "Users can CRUD own transaction items"
  on transaction_items for all
  using ( 
    exists ( 
      select 1 from transactions 
      where transactions.id = transaction_items.transaction_id 
      and transactions.owner_id = auth.uid() 
    )
  );

-- Create indexes for better performance
create index if not exists products_owner_id_idx on products(owner_id);
create index if not exists inventory_owner_id_idx on inventory(owner_id);
create index if not exists transactions_owner_id_idx on transactions(owner_id);
create index if not exists products_barcode_idx on products(barcode);

-- Create function to handle updated_at
create or replace function handle_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

-- Create triggers for updated_at
create trigger handle_updated_at
  before update on profiles
  for each row
  execute function handle_updated_at();

create trigger handle_updated_at
  before update on products
  for each row
  execute function handle_updated_at();

create trigger handle_updated_at
  before update on inventory
  for each row
  execute function handle_updated_at();

create trigger handle_updated_at
  before update on transactions
  for each row
  execute function handle_updated_at();
